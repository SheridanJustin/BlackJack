package blackjack.blackjack_group;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Optional;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

/**
 * Gabriel Pooranachandran
 * This class is the controller for the login screen in the Blackjack game.
 */

public class LoginController
{

	@FXML
	private Label creatorLabel;

	@FXML
	private Button loginBtn;

	@FXML
	private Label loginTitle;

	@FXML
	private HBox loginTitle_hbox;

	@FXML
	private Button quitBtn;

	@FXML
	private Button registerBtn;

	@FXML
	private TextField registerField;

	@FXML
	private Label registerLabel;

	@FXML
	private TextField userField;

	@FXML
	private Label userLabel;

	BufferedWriter writer = null;
	BufferedReader reader = null;

	// creates an Alert object once so a new Alert object doesn't have to be created every time a new alert is needed

	Alert a = new Alert(Alert.AlertType.NONE);

	/**
	 * Handles the login button click event.
	 * Checks if there's an input in the username field. If the field isn't empty it
	 * reads the input and cross-references it with the usernames.txt file (created
	 * during registration). If there's a match, it shows a confirmation dialog and
	 * starts the main game on "OK".
	 * If there's no match found, it prompts the user to enter a register.
	 * If the field is left blank, it will notify the user that the field is blank.
	 *
	 * @param event The action event generated by the login button click.
	 */

	@FXML
	void loginHandler(ActionEvent event)
	{

		if(userField.getText().isEmpty())
		{
			a.setAlertType(AlertType.WARNING);
			a.setContentText("The Username is empty.");
			a.showAndWait();
		}
		else
		{
			try
			{
				reader = new BufferedReader(new FileReader("usernames.txt"));
				String username = userField.getText().toString();
				String line;
				while ((line = reader.readLine()) != null)
				{
					if (line.equals(username))
					{
						userField.setText("");
						a.setAlertType(AlertType.CONFIRMATION);
						a.setTitle("CONFIRMATION");
						a.setContentText("Have fun!");
						a.close();
						Optional<ButtonType> result = a.showAndWait();

						if (result.isPresent() && result.get() == ButtonType.OK)
						{
							try
							{
								a.close();
								startNew();
							}
							catch(IllegalStateException yolo)
							{
								System.out.println("I goofed, lol");
							} catch (Exception e) {
								throw new RuntimeException(e);
							}
						}
						break;
					}
					else
					{
						a.setAlertType(AlertType.WARNING);
						userField.setText("");
						a.setContentText("Username not found.\nPlease register below and try again.");
						a.show();

					}
				}
			}
			catch (IOException e)
			{
				System.out.println("oof, IO e @ login");
			}
		}
	}

	/**
	 * Handles the event when the "Quit" button is clicked.
	 * Displays a warning dialog box asking the user if they want to quit the program.
	 * If the user clicks "OK", the program is closed.
	 * @param event the event that triggered this method
	 **/

	@FXML
	void quitHandler(ActionEvent event)
	{
		a.setAlertType(AlertType.WARNING);
		a.setTitle("Quit?");
		a.setContentText("Do you want to quit?");
		Optional<ButtonType> result = a.showAndWait();
		if(result.isPresent() && result.get() == ButtonType.OK)
		{
			System.exit(0);
		}

	}

	/**
	 * Handles the event when the "Register" button is clicked.
	 * Writes the entered username to a file called "usernames.txt". If the field is empty, a dialog box is
	 * displayed, prompting the user to enter a string before clicking the register button.
	 * If the validation is successful and the username is written to the file, a dialog box is displayed.
	 * and the text field is cleared.
	 * @param event the event that triggered this method
	 * @throws IOException if an I/O error occurs while writing to the file
	 */

	@FXML
	void registerHandler(ActionEvent event) throws IOException
	{
		writer = new BufferedWriter(new FileWriter("usernames.txt", true));

		if(registerField.getText().isEmpty())
		{
			a.setAlertType(AlertType.WARNING);
			a.setContentText("dawg dis empty");
			a.showAndWait();
		}
		else
		{
			try
			{
				writer.write(registerField.getText().toString() +"\n");
			}

			catch(IOException e)
			{
				e.printStackTrace();
			}

			finally
			{
				writer.close();
			}

			a.setAlertType(AlertType.CONFIRMATION);
			a.setContentText("ayyy we gucci \n user registered");
			a.showAndWait();
			registerField.setText("");

		}
	}
	/**
	 * This method is used to start a new stage, specifically the main game stage, housed in the BlackjackUI class.
	 * It creates a new BlackjackUI object which allows it to reference the other class.
	 * @throws Exception if needed
	 */

	public void startNew() throws Exception {
		BlackjackUI blackjack = new BlackjackUI();
		Stage mainGUI = new Stage();
		blackjack.start(mainGUI);
	}

}
